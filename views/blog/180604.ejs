<!DOCTYPE html>

<html lang="ja">
<head>
<title><%= title %></title>
<meta charset="UTF-8" />
<meta name="viewport" content="width=device-width, initial-scale=1">
<link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/bootstrap/4.1.0/css/bootstrap.min.css">
<script src="https://ajax.googleapis.com/ajax/libs/jquery/3.3.1/jquery.min.js"></script>
<script src="https://cdnjs.cloudflare.com/ajax/libs/popper.js/1.14.0/umd/popper.min.js"></script>
<script src="https://maxcdn.bootstrapcdn.com/bootstrap/4.1.0/js/bootstrap.min.js"></script>
</head>

<body>

<div class="container">
<h1 id="開発日誌180604">開発日誌：180604</h1>
<h2 id="node.jsとexpressの初歩的な配置">Node.jsとExpressの初歩的な配置</h2>
<hr />
<p>JSで卒論のアプリを開発することになったので適合のフレームワークを探してみた。<br />
ググったら、いろんな紹介を見て、最後に先生のおすすめと同じくNode.js + Expressの組合せを使うことにした。<br />
今度インストールから簡単なサイトの作り方、簡単なルータ配置までまとめてみようとする。</p>
<h3 id="node.jsとexpressのインストール">1. Node.jsとExpressのインストール</h3>
<hr />
<p>Node.jsの<a href="https://nodejs.org/en/">公式サイト</a>で.msiのインストールパックをダウンロードして、インストールする。<br />
安定性を求めたいので、LTS（長期的にサポートされるバージョン）のv8.11.2を選ぶ。<br />
インストールするとともに、NPM（Nodejs Package Manager）もインストールされた。</p>
<p>Windowsのコマンドラインでいつも「Expressジェネレータ」というexpressプロジェクトを初期化するツールを使いたいので、<br />
<code>npm i express-generator -g</code>を実行してExpressジェネレータというnodeパッケージをグローバル環境にインストールする。<br />
それで、プロジェクト用のフォルダを一つ新たに作って、その中で</p>
<blockquote>
<pre><code>express -e  
npm install  </code></pre>
</blockquote>
<p>を実行してejsをviewエンジンと使うExpressプロジェクトを初期化する。</p>
<p>最後に<code>npm start</code>を実行してから、<a href="http://127.0.0.1:3000">http://127.0.0.1:3000/</a>にアクセスして<br />
デフォルトのページ（「Welcome to Express」とかなんとかを書いてあるが）が表示されたらサーバが順調に動いている。<br />
（ちなみに、LANのアドレスを使ってもアクセスできるらしい）</p>
<h3 id="ルートの配置を通してサブフォルダを作ってページを入れる">2. ルートの配置を通してサブフォルダを作ってページを入れる</h3>
<hr />
<p>かなり軽量化のサーバなので、Node.jsはapacheの特徴な静的ページ機能をサポートしていない。<br />
それどころか、apacheとnginxのように<code>/var/www/</code>にファイルをいれて<br />
<code>http://example.com/ファイル</code>にアクセスするという普段のリソースアクセス法までできない。<br />
しかし、Expressのルータ機能を利用したら何とか静的ページを作ることができるらしい。</p>
<h4 id="カスタムのファーストレベルフォルダを作る">（1） カスタムのファーストレベル　フォルダを作る</h4>
<p>プロジェクトフォルダに置いているapp.jsを開くと、初めの部分に</p>
<blockquote>
<pre><code>var indexRouter = require(&#39;./routes/index&#39;);  
var usersRouter = require(&#39;./routes/users&#39;);   </code></pre>
</blockquote>
<p>のようなコードが書いてある。<br />
それに対して、プロジェクトフォルダ/routesにはindex.jsとusers.jsというファイルが二つある。<br />
上記のコマンドは、./routes/<em>.jsファイルを使い、</em>Routerという名前のルータメソッドを作るコマンドである。</p>
<p>では、Expressで<code>http://example.com/blog/</code>のようなファーストレベル フォルダ<br />
（あるいはファーストレベル　ページ）を作るにはどうしたらよいのか。</p>
<p>/app.jsに</p>
<blockquote>
<pre><code>var blogRouter = require(&#39;./routes/blog&#39;);    
app.use(&#39;/blog&#39;, blogRouter);  </code></pre>
</blockquote>
<p>を書き入れてセーブしたら、http://example.com/blog/ のようなファーストレベル フォルダ<br />
（実は論理的なルータだけど）を作った。</p>
<h4 id="ファーストレベルフォルダの下にページを作る">（2） ファーストレベル　フォルダの下にページを作る</h4>
<p>さきにはファーストレベル　フォルダの論理的ルータを設置した。 では、その下のセカンドレベル　フォルダ（ページ）も作ってみよう。</p>
<blockquote>
<pre><code>var blogRouter = require(&#39;./routes/blog&#39;);  </code></pre>
</blockquote>
<p>が示したとおりに、セカンドレベル　フォルダの論理的ルータ構造は、<br />
プロジェクトフォルダ/routes/（以下、./routes/）の下に置いている .jsファイルによってコントロールされている。</p>
<p>まず、例として./routes/index.jsを見てみよう。</p>
<blockquote>
<pre><code>var express = require(&#39;express&#39;);  
var router = express.Router();  
  
/* GET home page. */  
router.get(&#39;/&#39;, function(req, res, next) {  
  res.render(&#39;index&#39;, { title: &#39;Express&#39; });  
});  
  
module.exports = router;  </code></pre>
</blockquote>
<p>って書いてある。</p>
<p>そのロジックを分析してみよう。<br />
ルートフォルダの下のセカンドレベル　フォルダ（ページ）の論理的ルータ構造をコントロールするこの.jsファイルは、<br />
express.Routerのメソッドを使い、 もしサーバ側がクライエントの「/ にアクセスする」というリクエスト（request）を<br />
ゲット（get）したら、タイトルがExpressの「./view/」フォルダの下のindex.ejsをejs viewエンジンで処理してから<br />
クライエント側にレスポンス（response）してあげるらしい。<br />
なので、内容をコピーして、ただres.renderの引数の’index’を’blog’に、<br />
タイトル内容の’Express’を実際のタイトルに書きかえればOKである。</p>
<p>最後は、書きかえた内容をblog.jsとして./routes/にセーブすると、この部分の設置も完了した。</p>
<h3 id="markdown言語pandocejsエンジンでページを作る">3. markdown言語+Pandoc+ejsエンジンでページを作る</h3>
<hr />
<p>Expressは、そのまま.htmlファイルを使うことではなく、<br />
viewエンジンを使ってテンプレートファイルを.htmlファイルに変換してから出力することになった。<br />
viewエンジンの種類は多く、先生曰く「Pythonの文法に似ている」のJade（現在はPug）から<br />
ほぼHTMLの書き方と同じのEJSまでたくさんあるらしい。<br />
初心者にとってejsエンジンの文法はhtmlとほぼ同じなので、ejsを選んでhtmlの文法で内容を書けばよい。<br />
しかし、「手でゼロからHTMLを書くのは面倒」（また先生曰く）なので、より簡潔なmarkdown言語を利用して、<br />
わたり橋のPandocというツールでHTMLに変換することに決めた。</p>
<p>markdown言語の教程は、ググったらいっぱいあるのでここでは割愛。<br />
markdown言語で書かれた .mdファイルをどうHTMLに転換するのを説明したい。</p>
<p>個人の癖で ./view/フォルダの下に.md/フォルダを作って、その中に.mdファイルを置いておいた。<br />
コマンドプロンプトで./view/.md/を開いて、もしindex.mdというファイルを変換したいなら</p>
<blockquote>
<pre><code>pandoc index.md -o index.html</code></pre>
</blockquote>
<p>を実行して、生成したファイルの拡張子を.ejsに書き換えるだけでオッケー。<br />
ちなみに、このサイトのホームページと日誌は全部こう作ったものである。</p>
<hr />
<p>追伸：来週のゼミ（6/11）は名古屋の内定者セミナーに出席するので休む。<br />
そのため来週分の更新は飛ばさせていただく。</p>
<p><a href="/blog" title="ブログ">前のページに戻る</a></p>
</div>

</body>
</html>
